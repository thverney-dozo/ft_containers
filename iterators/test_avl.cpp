# include "./avl_tree.hpp"
# include <string>

int     main()
{
    {
        // ft::B_S_T<int> *first = ft::create_new_bst(30);
        // // ft::B_S_T<int> *search_50;

        // // ft::print_tree(first, 0);
        // // std::cout << "#####################[30 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 20);
        // // ft::print_tree(first, 0);
        // // std::cout << "#####################[20 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 10);
        // // ft::print_tree(first, 0);
        // // std::cout << "#####################[10 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 50);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[50 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 35);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[35 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 9);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[9 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 8);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[8 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 7);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[7 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 6);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[6 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 5);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[5 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 4);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[4 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 3);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[3 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 2);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[2 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 1);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[1 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 0);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[0 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 51);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[51 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 52);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[52 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 53);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[53 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 54);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[54 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 55);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[55 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 56);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[56 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 57);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[57 inserted]########################" << std::endl;
        // first = ft::insert_in_tree(first, 58);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // // std::cout << "#####################[58 inserted]########################" << std::endl;
        // // first = ft::insert_in_tree(first, 59);
        // // ft::print_tree(first, 0);
        // // search_50 = search(first, 50);
        // // std::cout << "for 50 parent: " << search_50->parent->value << std::endl;
        // std::cout << "#####################[59 inserted]########################" << std::endl;
        // // ft::B_S_T<int> *max_node = ft::search(first, 50);
        // // std::cout << "max = " << max_node->value << std::endl;
        // // std::cout << "max parent = " << max_node->parent->value << std::endl;
        // // std::cout << "max annexe = " << max_node->parent->left->value << std::endl;
        // // std::cout << "max annexe = " << max_node->parent->right->value << std::endl;
        // ft::print_tree(first, 0);
        // first = ft::delete_in_tree(first, 20);
        // std::cout << "#####################[20 deleted]########################" << std::endl;
        // ft::print_tree(first, 0);
    }

    ft::B_S_T<int> *first = ft::create_new_bst(30);
    first = ft::insert_in_tree(first, 20);
    first = ft::insert_in_tree(first, 10);
    first = ft::insert_in_tree(first, 50);
    first = ft::insert_in_tree(first, 35);
    first = ft::insert_in_tree(first, 9);
    first = ft::insert_in_tree(first, 8);
    first = ft::insert_in_tree(first, 7);
    first = ft::insert_in_tree(first, 6);
    first = ft::insert_in_tree(first, 5);
    first = ft::insert_in_tree(first, 4);
    first = ft::insert_in_tree(first, 3);
    first = ft::insert_in_tree(first, 2);
    first = ft::insert_in_tree(first, 1);
    first = ft::insert_in_tree(first, 0);
    first = ft::insert_in_tree(first, 51);
    first = ft::insert_in_tree(first, 52);
    first = ft::insert_in_tree(first, 53);
    first = ft::insert_in_tree(first, 54);
    first = ft::insert_in_tree(first, 55);
    first = ft::insert_in_tree(first, 56);
    first = ft::insert_in_tree(first, 57);
    first = ft::insert_in_tree(first, 58);
    std::cout << "#####################[59 inserted]########################" << std::endl;
    // ft::B_S_T<int> *max_node = ft::search(first, 50);
    // std::cout << "max = " << max_node->value << std::endl;
    // std::cout << "max parent = " << max_node->parent->value << std::endl;
    // std::cout << "max annexe = " << max_node->parent->left->value << std::endl;
    // std::cout << "max annexe = " << max_node->parent->right->value << std::endl;
    ft::print_tree(first, 0);
    first = ft::delete_in_tree(first, 20);
    std::cout << "#####################[20 deleted]########################" << std::endl;
    ft::print_tree(first, 0);

}